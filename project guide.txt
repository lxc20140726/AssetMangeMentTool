# 项目说明
为了辅助本人记账开发的资产管理工具
为前后端分离项目
## 功能说明
### 记账统计模块
1. 导入特定格式的excel，解析成一条条账单数据
2. 账单数据进行可视化分析，生成桑基图，生成每日时段消费图
3. 桑基图从左到右分别为：具体条目，分类，当月总支出
4. 具体条目根据账单数据关键字自动分类
5. 账单数据能够变成在线条目表格，手动编辑，拥有标签，类似notion
6. 可以进行历史天周月份年份数据对比
7. 实现不同时间单位下的预算设置
8. 可以将分类完的账目进行固定格式excel的导出
9. 每日平均费用计算
10.通过已有数据，预测未来消费曲线和各部分占比
11.生成未来理财存款曲线
### 理财模块
1. 保存当前状态下的资产配置比例，可视化展示，以周为单位更新
2. 通过数据接口获取最新情况下的资产状态，以周为单位更新
3. 单独资产的升降涨幅显示
## 技术栈
### 前端技术栈
1. **核心框架**：
   - Vue 3 + TypeScript：轻量级框架，学习曲线平缓
   - Vite：极速的开发服务器和构建工具

2. **UI框架**：
   - Element Plus：轻量级UI组件库
   - 或 Naive UI：更现代的Vue 3组件库

3. **数据可视化**：
   - ECharts：强大的图表库，支持桑基图等复杂图表
   - Vue-ECharts：Vue 3的ECharts封装

4. **状态管理**：
   - Pinia：Vue 3的轻量级状态管理方案

### 后端技术栈
1. **核心框架**：
   - Node.js + Express：轻量级后端框架

2. **数据存储**：
   - SQLite：文件型数据库，无需安装
   - 或 JSON文件存储：最轻量的方案
   - 使用 `lowdb` 或 `better-sqlite3` 作为数据访问层

3. **文件处理**：
   - Multer：处理文件上传
   - ExcelJS：处理Excel文件读写

## 项目架构
### 目录结构
```
project/
├── frontend/
│   ├── src/
│   │   ├── views/          # 页面组件
│   │   ├── components/     # 通用组件
│   │   ├── stores/         # Pinia状态管理
│   │   ├── api/           # API请求
│   │   └── utils/         # 工具函数
│   └── public/            # 静态资源
├── backend/
│   ├── src/
│   │   ├── routes/        # 路由定义
│   │   ├── controllers/   # 控制器
│   │   ├── services/      # 业务逻辑
│   │   ├── db/           # 数据库操作
│   │   └── utils/        # 工具函数
│   └── data/             # 数据文件存储
└── docker/
    ├── frontend.Dockerfile
    ├── backend.Dockerfile
    └── docker-compose.yml
```

### 页面组织
1. **记账统计模块**
   - 数据导入页面 (`/import`)
   - 数据可视化页面 (`/analytics`)
   - 账单管理页面 (`/bills`)
   - 预测分析页面 (`/forecast`)

2. **理财模块**
   - 资产配置页面 (`/assets`)
   - 资产详情页面 (`/assets/[id]`)

## Docker部署
### 构建镜像
```bash
# 构建镜像
docker build -t asset-management-tool:latest .

# 给镜像打标签
docker tag asset-management-tool:latest your-registry/asset-management-tool:latest

# 推送镜像到仓库
docker push your-registry/asset-management-tool:latest
```

### 部署步骤
1. **安装Docker**
```bash
curl -fsSL https://get.docker.com | sh
```

2. **下载部署脚本**
```bash
curl -O https://your-domain.com/deploy.sh
chmod +x deploy.sh
```

3. **执行部署**
```bash
./deploy.sh
```

### 数据备份
```bash
# 备份数据
docker exec asset-management tar -czf /app/data/backup.tar.gz /app/data
docker cp asset-management:/app/data/backup.tar.gz ./backup.tar.gz
```

## 技术指标
数据量：10-100GB

## 开发环境配置
1. **前端开发**
```bash
# 创建Vue项目
npm create vite@latest frontend -- --template vue-ts
cd frontend
npm install
```

2. **后端开发**
```bash
# 创建后端项目
mkdir backend
cd backend
npm init -y
npm install express better-sqlite3 cors multer exceljs
```

## 维护说明
1. **更新服务**
```bash
# 停止并删除旧容器
docker stop asset-management
docker rm asset-management

# 重新运行部署脚本
./deploy.sh
```

2. **查看日志**
```bash
docker logs -f asset-management
```

3. **数据备份**
```bash
# 执行备份脚本
./backup.sh
```

## 日志监控
### 技术栈
1. **日志收集**
   - Winston：Node.js日志库
   - Vue Logger：前端日志记录

2. **日志存储**
   - 本地文件存储
   - Docker日志驱动：json-file

### 日志规范
1. **日志级别**
   - ERROR：系统错误，需要立即处理
   - WARN：警告信息，需要关注
   - INFO：重要业务信息
   - DEBUG：调试信息（开发环境使用）

2. **日志格式**
```json
{
  "timestamp": "2024-03-21T10:00:00.000Z",
  "level": "INFO",
  "module": "bills",
  "action": "import",
  "message": "账单导入成功",
  "details": {
    "fileSize": "1.2MB",
    "recordCount": 100
  }
}
```

3. **日志分类**
   - 系统日志：记录系统运行状态
   - 业务日志：记录重要业务操作
   - 错误日志：记录系统错误

### 监控重点
1. **系统运行**
   - 服务启动/停止
   - 系统错误
   - 资源异常

2. **业务操作**
   - 账单导入/导出
   - 数据修改
   - 用户登录

3. **错误追踪**
   - 接口调用失败
   - 数据处理异常
   - 文件操作错误

### 日志配置
1. **Docker配置**
```yaml
# docker-compose.yml
services:
  backend:
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
```

2. **Winston配置**
```javascript
const winston = require('winston');

const logger = winston.createLogger({
  level: process.env.NODE_ENV === 'production' ? 'info' : 'debug',
  format: winston.format.json(),
  transports: [
    new winston.transports.File({ 
      filename: 'logs/error.log', 
      level: 'error',
      maxsize: 5242880, // 5MB
      maxFiles: 5
    }),
    new winston.transports.File({ 
      filename: 'logs/combined.log',
      maxsize: 5242880, // 5MB
      maxFiles: 5
    })
  ]
});

// 开发环境同时输出到控制台
if (process.env.NODE_ENV !== 'production') {
  logger.add(new winston.transports.Console({
    format: winston.format.simple()
  }));
}
```

### 日志查看
1. **实时查看**
```bash
# 查看后端日志
docker logs -f asset-management

# 查看错误日志
tail -f logs/error.log

# 查看所有日志
tail -f logs/combined.log
```

2. **日志搜索**
```bash
# 搜索错误日志
grep "ERROR" logs/combined.log

# 搜索特定模块日志
grep "bills" logs/combined.log
```

### 维护建议
1. **日志管理**
   - 定期清理过期日志
   - 压缩历史日志
   - 备份重要日志

2. **日志分析**
   - 定期检查错误日志
   - 分析常见问题
   - 优化系统性能
